years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
model <- lm(sales ~ years)
summary(model)
predict(model, data.frame(years=2016))
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
model <- lm(sales ~ years)
summary(model)
predict(model, data.frame(years=2016))
x <- 0:10
y <- dbinom(x, size=10, prob=0.5)
plot(x, y, type="h", main="Binomial Distribution", xlab="x", ylab="Probability")
x <- 0:10
y <- dbinom(x, size=10, prob=0.5)
plot(x, y, type="h", main="Binomial Distribution", xlab="x", ylab="Probability")
x <- 0:10
y <- dbinom(x, size=10, prob=0.5)
plot(x, y, type="h", main="Binomial Distribution", xlab="x", ylab="Probability")
subject1 <- c(85, 78, 92, 70, 88)
subject2 <- c(80, 75, 90, 68, 85)
plot(subject1, subject2, main="Scatter Plot of Subject Scores", xlab="Subject 1",ylab="Subject 2")
x <- 0:10
y <- dpois(x, lambda=4)
plot(x, y, type="h", main="Poisson Distribution (λ=4)", xlab="x", ylab="Probability")
x <- 0:10
y <- dpois(x, lambda=4)
plot(x, y, type="h", main="Poisson Distribution (λ=4)", xlab="x", ylab="Probability")
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
model <- lm(sales ~ years)
summary(model)
x <- seq(0, 5, length=100)
y <- dexp(x, rate=1)
plot(x, y, type="l", main="Exponential Distribution", xlab="x", ylab="Density")
x <- seq(0, 5, length=100)
y <- dexp(x, rate=1)
plot(x, y, type="l", main="Exponential Distribution", xlab="x", ylab="Density")
x <- seq(0, 5, length=100)
y <- dexp(x, rate=1)
plot(x, y, type="l", main="Exponential Distribution", xlab="x", ylab="Density")
x <- seq(0, 5, length=100)
y <- dexp(x, rate=1)
plot(x, y, type="l", main="Exponential Distribution", xlab="x", ylab="Density")
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
model <- lm(sales ~ years)
summary(model)
summary(lm(Sales ~ Year, data=sales_data))$coefficients
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
model <- lm(sales ~ years)
summary(model)
summary(lm(Sales ~ Year, data=sales_data))$coefficients
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
model <- lm(sales ~ years)
summary(model)
summary(lm(Sales ~ Year, data=sales))$coefficients
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
model <- lm(sales ~ years)
summary(model)
summary(lm(Sales ~ Year, data=sales))$coefficients
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
model <- lm(sales ~ years)
summary(model)
summary(lm(Sales ~ Year, data=sales))$coefficients
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
model <- lm(sales ~ years)
summary(model)
summary(lm(Sales ~ Year, data=sales))$coefficients
x=c(34,56,78,21,45,32,78,53,65,64)
y=c(32,45,62,27,49,59,90,76,43,65)
r=cor(x,y)
cat("corelation coefficient",r)
x <- seq(-3, 3, length=100)
y <- dnorm(x)
plot(x, y, type="l", main="Normal Distribution", xlab="x", ylab="Density")
x <- runif(100, min=0, max=1)
hist(x, main="Uniform Distribution", xlab="x", ylab="Frequency")
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
model <- lm(sales ~ years)
summary(model)
predict(model, data.frame(years=2016))
x <- 0:10
y <- dbinom(x, size=10, prob=0.5)
plot(x, y, type="h", main="Binomial Distribution", xlab="x", ylab="Probability")
subject1 <- c(85, 78, 92, 70, 88)
subject2 <- c(80, 75, 90, 68, 85)
plot(subject1, subject2, main="Scatter Plot of Subject Scores", xlab="Subject 1",ylab="Subject 2")
x <- 0:10
y <- dpois(x, lambda=4)
plot(x, y, type="h", main="Poisson Distribution (λ=4)", xlab="x", ylab="Probability")
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
model <- lm(sales ~ years)
summary(model)
x <- seq(0, 5, length=100)
y <- dexp(x, rate=1)
plot(x, y, type="l", main="Exponential Distribution", xlab="x", ylab="Density")
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
model <- lm(sales ~ years)
summary(model)
summary(lm(Sales ~ Year, data=sales_data))$coefficients
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
model <- lm(sales ~ years)
summary_output <- summary(model)
print(summary_output)
intercept <- coef(model)[1]
slope <- coef(model)[2]
cat("The equation of the regression line is: Sales =", intercept, "+", slope, "* Year\n")
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
predict(model, newdata=data.frame(years=c(2016, 2017)))
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
predict(model, newdata=data.frame(years=c(2016, 2017)))
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
predict(model, newdata=data.frame(years=c(2016, 2017)))
data(iris)
t.test(iris$Sepal.Length, mu=5)
data(iris)
t.test(iris$Sepal.Length, mu=5)
data(iris)
plot(iris$Sepal.Width, iris$Sepal.Length, main="Sepal Width vs Sepal Length") abline(model, col="red")
data(iris)
plot(iris$Sepal.Width, iris$Sepal.Length, main="Sepal Width vs Sepal Length") abline(model, col="red")
data(iris)
plot(iris$Sepal.Width, iris$Sepal.Length, main="Sepal Width vs Sepal Length")
abline(model, col="red")
data(iris)
plot(iris$Sepal.Width, iris$Sepal.Length, main="Sepal Width vs Sepal Length")
abline(model, col="red")
Data(iris)
data(iris)
setosa <- subset(iris, Species=="setosa")$Sepal.Length
versicolor <- subset(iris, Species=="versicolor")$Sepal.Length
t.test(setosa, versicolor)
data(iris)
anova_model <- aov(Sepal.Length ~ Species, data=iris)
summary(anova_model)
data(iris)
iris$SepalLength
Cat <- iris$Sepal.Length > mean(iris$Sepal.Length)
table <- table(iris$Species, iris$SepalLengthCat)
data(iris)
iris$SepalLengthCat <- iris$Sepal.Length > mean(iris$Sepal.Length)
table <- table(iris$Species, iris$SepalLengthCat)
chisq.test(table)
x <- seq(-3, 3, length=100)
y <- dnorm(x)
plot(x, y, type="l", main="Normal Distribution", xlab="x", ylab="Density")
predict(lm(Sales ~ Expenses, data=sales_data))
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
model <- lm(sales ~ years)
summary(model)
summary(lm(Sales ~ Year, data=sales_data))$coefficients
Sales <- c(500, 550, 580, 600, 620, 640, 680)
Expenses <- c(300, 320, 340, 350, 370, 390, 400)
model <- lm(Sales ~ Expenses)
print(summary(model))
new_expenses <- data.frame(Expenses = c(310, 330, 360, 380))
estimated_sales <- predict(model, new_expenses)
print(estimated_sales)
dbinom(0:20, size=20, prob=0.3)
barplot(dbinom(0:20, size=20, prob=0.3), col='cyan')
dbinom(0:20, size=20, prob=0.3)
barplot(dbinom(0:20, size=20, prob=0.3), col='cyan')
dbinom(0:20, size=20, prob=0.3)
barplot(dbinom(0:20, size=20, prob=0.3), col='cyan')
dbinom(0:20, size=20, prob=0.3)
barplot(dbinom(0:20, size=20, prob=0.3), col='cyan')
dbinom(0:20, size=20, prob=0.3)
barplot(dbinom(0:20, size=20, prob=0.3), col='cyan')
dbinom(0:20, size=20, prob=0.3)
barplot(dbinom(0:20, size=20, prob=0.3), col='cyan')
dbinom(0:20, size=20, prob=0.3)
barplot(dbinom(0:20, size=20, prob=0.3), col='cyan')
exp_data <- rexp(1000, rate = 0.5)  # 1000 values, rate parameter 0.5
# Plot the histogram
hist(exp_data, main = "Exponential Distribution", xlab = "Values", col = "lightblue")
exp_data <- rexp(1000, rate = 0.5)  # 1000 values, rate parameter 0.5
# Plot the histogram
hist(exp_data, main = "Exponential Distribution", xlab = "Values", col = "lightblue")
exp_data <- rexp(1000, rate = 0.5)  # 1000 values, rate parameter 0.5
# Plot the histogram
hist(exp_data, main = "Exponential Distribution", xlab = "Values", col = "lightblue")
exp_data <- rexp(1000, rate = 0.5)  # 1000 values, rate parameter 0.5
# Plot the histogram
hist(exp_data, main = "Exponential Distribution", xlab = "Values", col = "lightblue")
summary(lm(Sales ~ Year, data=sales_data))
summary(lm(Sales ~ Year, data=sales_data))
summary(lm(Sales ~ Year, data=sales_data))
summary(lm(Sales ~ Year, data=sales_data))
data(iris)
t.test(iris$Sepal.Length[iris$Species == 'setosa'], iris$Sepal.Length[iris$Species ==
'versicolor'])
data(iris)
anova(lm(Sepal.Length ~ Species, data=iris))
data(iris)
anova(lm(Sepal.Length ~ Species, data=iris))
data(iris)
anova(lm(Sepal.Length ~ Species, data=iris))
Data(iris)
Data(iris)
Data(iris)
Data(iris)
data(iris)
table(iris$Species, iris$Sepal.Length > mean(iris$Sepal.Length))
chisq.test(table(iris$Species, iris$Sepal.Length > mean(iris$Sepal.Length)))
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
model <- lm(sales ~ years)
summary(model)
intercept <- coef(model)[1]
slope <- coef(model)[2]
cat("The equation of the regression line is: Sales =", intercept, "+", slope, "* Year\n")
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
model <- lm(sales ~ years)
summary(model)
intercept <- coef(model)[1]
slope <- coef(model)[2]
cat("The equation of the regression line is: Sales =", intercept, "+", slope, "* Year\n")
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
predict(model, newdata=data.frame(years=c(2016, 2017)))
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
predict(model, newdata=data.frame(years=c(2016, 2017)))
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
predict(model, newdata=data.frame(years=c(2016, 2017)))
years <- c(2012, 2013, 2014, 2015)
sales <- c(500, 550, 580, 600)
predict(model, newdata=data.frame(years=c(2016, 2027)))
# (a) All 5 operations successful if p = 0.8
p <- 0.8
prob_a <- p^5
prob_a
# (b) Exactly 4 operations successful if p = 0.6
p <- 0.6
prob_b <- choose(5, 4) * (p^4) * ((1 - p)^1)
prob_b
# (c) Less than 2 operations successful if p = 0.3
p <- 0.3
prob_c <- dbinom(0, 5, p) + dbinom(1, 5, p)
prob_c
# # (a) All 5 operations successful if p = 0.8
# p <- 0.8
# prob_a <- p^5
# prob_a
#
# # (b) Exactly 4 operations successful if p = 0.6
# p <- 0.6
# prob_b <- choose(5, 4) * (p^4) * ((1 - p)^1)
# prob_b
#
# # (c) Less than 2 operations successful if p = 0.3
# p <- 0.3
# prob_c <- dbinom(0, 5, p) + dbinom(1, 5, p)
# prob_c
#
# (a) Probability exactly 14 survive
n <- 20
p <- 0.8
prob_a <- dbinom(14, n, p)
prob_a
# (b) Probability at least 10 survive
prob_b <- sum(dbinom(10:n, n, p))
prob_b
# (c) Probability at most 16 survive
prob_c <- sum(dbinom(0:16, n, p))
prob_c
# (d) Mean and variance
mean <- n * p
var <- n * p * (1 - p)
mean
var
# (a) Probability the first with training is found on the 5th interview
p <- 0.3
prob_a <- dgeom(4, p)
prob_a
# (b) Expected number of applicants to find the first with training
expected <- 1 / p
expected_b
# (a) Probability the first with training is found on the 5th interview
p <- 0.3
prob_a <- dgeom(4, p)
prob_a
# (b) Expected number of applicants to find the first with training
expected <- 1 / p
expected
lambda <- 7 # average customers per hour
# (a) Probability no more than 3 customers arrive
prob_a <- ppois(3, lambda)
prob_a
# (b) Probability at least 2 customers arrive
prob_b <- 1 - ppois(1, lambda)
prob_b
# (c) Probability exactly 5 customers arrive
prob_c <- dpois(5, lambda)
prob_c
N <- 50 # Population size
K <- 20 # Number of successes in the population
n <- 10 # Sample size
x <- 5  # Value to evaluate
# PMF
pmf <- dhyper(x, K, N - K, n)
pmf
# CDF
cdf <- phyper(x, K, N - K, n)
cdf
mu <- 3.0005
sigma <- 0.0010
lower <- 3.000 - 0.0020
upper <- 3.000 + 0.0020
# Fraction of production that is scrap
scrap <- 1 - pnorm(upper, mu, sigma) + pnorm(lower, mu, sigma)
scrap
mu <- 78
sigma <- sqrt(36) # Standard deviation
# (a) Probability score > 72
prob_a <- 1 - pnorm(72, mu, sigma)
prob_a
# (b) Minimum score for top 10% (A grade)
score_b <- qnorm(0.9, mu, sigma)
score_b
# (c) Cutoff for top 28.1% passing
score_c <- qnorm(1 - 0.281, mu, sigma)
score_c
# (d) Proportion scoring 5+ points above bottom 25% cutoff
bottom_25_cutoff <- qnorm(0.25, mu, sigma)
prob_d <- 1 - pnorm(bottom_25_cutoff + 5, mu, sigma)
prob_d
# (e) P(score > 84 | score > 72)
prob_e <- (1 - pnorm(84, mu, sigma)) / prob_7a
mu <- 78
sigma <- sqrt(36) # Standard deviation
# (a) Probability score > 72
prob_a <- 1 - pnorm(72, mu, sigma)
prob_a
# (b) Minimum score for top 10% (A grade)
score_b <- qnorm(0.9, mu, sigma)
score_b
# (c) Cutoff for top 28.1% passing
score_c <- qnorm(1 - 0.281, mu, sigma)
score_c
# (d) Proportion scoring 5+ points above bottom 25% cutoff
bottom_25_cutoff <- qnorm(0.25, mu, sigma)
prob_d <- 1 - pnorm(bottom_25_cutoff + 5, mu, sigma)
prob_d
# (e) P(score > 84 | score > 72)
prob_e <- (1 - pnorm(84, mu, sigma)) / prob_a
prob_e
pnorm(1.5) - pnorm(-1.5)
n <- 1
while (pnorm(sqrt(n)/4) - pnorm(-sqrt(n)/4) < 0.9) {
n <- n + 1
}
n
se <- 0.75 / sqrt(40)
pnorm(0.2 / se) - pnorm(-0.2 / se)
setwd("E:/anuj/college/asm")
oc<-samples(c(0,1), 10 ,rep = TRUE)
oc<-sample(c(0,1), 10 ,rep = TRUE)
sampl<-mean(oc)
cat(sampl)
oc<-sample(c(0,1), 10 ,rep = TRUE)
sampl<-mean(oc)
cat(sampl)
oc<-sample(c(0,1), 10 ,rep = TRUE)
sampl<-mean(oc)
cat(sampl)
ml<-c()
for(i in 1:10000){
oc<-sample(c(0,1),10,rep = TRUE)
sm<-mean(oc)
ml<-append(ml,sm)
}
cat(mean(ml))
#mean
oc<-sample(c(0,1), 10 ,rep = TRUE)
sampl<-mean(oc)
cat(sampl)
#emprical mean
ml<-c()
for(i in 1:10000){
oc<-sample(c(0,1),10,rep = TRUE)
sm<-mean(oc)
ml<-append(ml,sm)
}
cat(mean(ml))
oc<-sample(c(0,1),10,rep = TRUE)
sv<-var(oc)
sv
bv<-c()
uv<-c()
for(i in 1:10000){
oc<-sample(c(0,1),10, rep = TRUE)
sm<-mean(oc)
varian<-0
for (j in 1:10){
uv<-uv+(oc[j] - sm)^2
}
uv<-uv / 10
bv <- append(bv,varian)
}
un <- 0
for (j in 1:10) {
un <- un + (outcome[j] - sm)^2
}
un <- 0
for (j in 1:10) {
un <- un + (oc[j] - sm)^2
}
un <- un / 9
uv <- append(uv, un)
}
#empirical var
bv<-c()
uv<-c()
for(i in 1:10000){
oc<-sample(c(0,1),10, rep = TRUE)
sm<-mean(oc)
varian<-0
for (j in 1:10){
uv<-uv+(oc[j] - sm)^2
}
uv<-uv / 10
bv <- append(bv,varian)
}
un <- 0
for (j in 1:10) {
un <- un + (oc[j] - sm)^2
}
un <- un / 9
uv <- append(uv, un)
}
un <- 0
for (j in 1:10) {
un <- un + (oc[j] - sm)^2
}
un <- un / 9
uv <- append(uv, un)
bv<-c()
uv<-c()
for(i in 1:10000){
oc<-sample(c(0,1),10, rep = TRUE)
sm<-mean(oc)
varian<-0
for (j in 1:10){
uv<-uv+(oc[j] - sm)^2
}
uv<-uv / 10
bv <- append(bv,varian)
}
un <- 0
for (j in 1:10) {
un <- un + (oc[j] - sm)^2
}
un <- un / 9
uv <- append(uv, un)
cat("biased variance:", mean(bv))
cat("unbiased variance:", mean(uv))
source("E:/anuj/college/asm/prac1.R")
source("E:/anuj/college/asm/prac1.R")
library(readcsv)
#1. Estimate the average marks in mathematics by all the students.
library(readcsv)
install.packages("readxl")
library(readxl)
stud2<-readxl("stud.csv")
#meanEstimating Mean
#1. Estimate the average marks in mathematics by all the students.
library(readxl)
stud2<-readxl("stud.xlsx")
#meanEstimating Mean
#1. Estimate the average marks in mathematics by all the students.
library(readxl)
stud2<-read_excel("stud.xlsx")
view(stud2)
#meanEstimating Mean
#1. Estimate the average marks in mathematics by all the students.
library(readxl)
stud2<-read_excel("stud.xlsx")
View(stud2)
mean_math<-mean(stud2$'math score',na.rm=TRUE)
cat(mean_math)
#2. Estimate the standard deviation in mathematics by all the students.
st<-sd(stud2$'math score',na.rm=TRUE)
cat(st)
#3. Place a 2-standard-error bound on the average marks in mathematics by all students.
n<-sum(!is.na(stud2$`math score`))
se<-st/sqrt(n)
lb<-mean_math -2*se
ub<-mean_math +2*se
cat(lb,ub)
em<-qt(0.975, df = n-1)*se
lob<-st - em
uob<-st + em
cat(lob,uob)
source("E:/anuj/college/asm/prac2.R")
source("E:/anuj/college/asm/prac2.R")
